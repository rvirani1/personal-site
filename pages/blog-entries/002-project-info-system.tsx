import Head from 'next/head'
import { BlogPost } from '../../components/blog/BlogPost'
import { Layout } from '../../components/Layout'
import sharedStyles from '../../components/blog/sharedStyles.module.css'
import { ExternalLink } from '../../components/blog/ExternalLink'

export default function BlogEntry() {
  return (
    <>
      <Head>
        <title>A Project Is An Information System... - RiazV.me</title>
        <meta
          name="description"
          content="This is an article that discusses how project management shared a lot of underlying principles with systems design"
        />
      </Head>
      <Layout>
        <BlogPost titleText="A Project Is An Information System" date="2016-01-16">
          <p className={sharedStyles.blogParagraph}>
            Think of your traditional software development team. Usually, the team has some software
            delivery or project management process. Maybe they have scrum boards, user stories,
            checkpoints, risk management registers, and the handy dandy&nbsp;
            <ExternalLink href="http://www.pmi.org/PMBOK-Guide-and-Standards.aspx" text="PMBOK book" />
            &nbsp;(sometimes with a&nbsp;
            <ExternalLink href="http://www.pmi.org/Certification/Project-Management-Professional-PMP.aspx" text="PMP Consultant" />
            )?
            Separately, the team may have a technical architect who think in terms of system design
            concepts, like&nbsp;
            <ExternalLink href="https://en.wikipedia.org/wiki/Service-oriented_architecture" text="SOA" />
            ,&nbsp;
            <ExternalLink href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" text="DRY code" />
            , or&nbsp;
            <ExternalLink href="https://en.wikipedia.org/wiki/Single_responsibility_principle" text="the single responsibility principle" />
            .

          </p>
          <p className={sharedStyles.blogParagraph}>
            Both of these realms of knowledge are necessarily to deliver software, but we consider them
            independent. That makes sense. One deals with people and the other with code.&nbsp;
            <strong>
              But maybe there are cases where they can learn from each other.
            </strong>
          </p>
          <p className={sharedStyles.blogParagraph}>
            Let’s do a thought experiment.
            <strong>What if we thought about project management as an information system?</strong>
            Let’s give it a shot with a typical project management challenge.
          </p>

          <h2>Challenge</h2>
          <ul className={sharedStyles.blogParagraph}>
            <li>on a physical board</li>
            <li>a software tool</li>
            <li>inadvertently, via email</li>
          </ul>

          <p className={sharedStyles.blogParagraph}>
            Keeping track of the changes is chaotic and information often slips through the cracks.
          </p>

          <h2>System Design Concept to Adopt: Data Normalization</h2>
          <p className={sharedStyles.blogParagraph}>
            Developers avoid storing the same data in multiple places inside of a database. Otherwise,
            they’d have to write code that updates every location when that data changes. They could
            forget to update one of those locations. Then none of the data would be trustworthy.
            Additionally, performance is impacted due to the increased number of writes. So instead,
            they normalize the database, so that the data exists in one location and references to that
            data can exist in other locations.
          </p>
          <h2>Solution: Normalize your Project Management Data</h2>
          <ul className={sharedStyles.blogParagraph}>
            <li>Designate your primary source. The software tool is the most flexible, so centralize on that.</li>
            <li>
              Intentionally get rid of other information locations or have them generated by reference to designated source.
              For example, replace the physical scrum board with a virtual board provided by the software tool. Replace
              email with commented conversations inside the software tool.
            </li>
          </ul>
          <p className={sharedStyles.blogParagraph}>
            So that wasn’t a very complicated example, but it provides a clear illustration.
            We took a simple concept in one field and came up an interesting approach to apply it in
            another. Can you think of any others?
          </p>
        </BlogPost>
      </Layout>
    </>
  )
}
